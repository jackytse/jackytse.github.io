<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>云鹏的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.jackytse.me/"/>
  <updated>2018-12-05T08:14:22.494Z</updated>
  <id>http://www.jackytse.me/</id>
  
  <author>
    <name>Jacky Tse</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Angular 开发环境搭建</title>
    <link href="http://www.jackytse.me/2017/angular-development-environment-setup/"/>
    <id>http://www.jackytse.me/2017/angular-development-environment-setup/</id>
    <published>2017-06-22T02:29:57.000Z</published>
    <updated>2018-12-05T08:14:22.494Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://jackytse-me.gz.bcebos.com/angular-development-environment-setup/angular-development-environment-setup-00001.jpg" alt></p><p>Angular 是一款开源 JavaScript 框架，由Google 维护，用来协助单一页面应用程序运行的。它的目标是增强基于浏览器的应用，使开发和测试变得更加容易。目前最新的 Angular 版本是 <code>v4.2.3</code></p><h2 id="开始搭建-Angular-开发环境"><a href="#开始搭建-Angular-开发环境" class="headerlink" title="开始搭建 Angular 开发环境"></a>开始搭建 Angular 开发环境</h2><p>搭建 Angular 开发环境需要的步骤：</p><ul><li>Node.js</li><li>配置 npm</li><li>Angular CLI</li></ul><a id="more"></a><h5 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a>安装 Node.js</h5><p>下载安装 <a href="https://nodejs.org/" target="_blank" rel="noopener">Node.js</a> ，下载最新的 LTS 版本即可，目前最新的版本是 <code>v6.11.0 LTS</code></p><h4 id="配置-npm"><a href="#配置-npm" class="headerlink" title="配置 npm"></a>配置 npm</h4><p>安装好 <code>Node.js</code> 之后需要配置一下 npm 国内源<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm config <span class="built_in">set</span> registry=<span class="string">"https://registry.npm.taobao.org/"</span></span><br></pre></td></tr></table></figure></p><p>或者 使用 <code>nrm</code> 去管理 <code>npm</code> 源<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm i nrm -g</span><br><span class="line">$ nrm use taobao</span><br></pre></td></tr></table></figure></p><p>由于 <code>node-sass</code> 包的下载链接被墙了，所以要配置一下 <code>node-sass</code> 的国内源<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm config <span class="built_in">set</span> sass_binary_site=<span class="string">"https://npm.taobao.org/mirrors/node-sass/"</span></span><br></pre></td></tr></table></figure></p><h4 id="安装-Angular-CLI"><a href="#安装-Angular-CLI" class="headerlink" title="安装 Angular CLI"></a>安装 Angular CLI</h4><p>Angular CLI 用于创建、编译、发布 Angular 项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$  npm i @angular/cli -g</span><br></pre></td></tr></table></figure><h2 id="创建测试项目"><a href="#创建测试项目" class="headerlink" title="创建测试项目"></a>创建测试项目</h2><p>打开终端，创建一个基于 <code>scss</code> 样式的 Angular 项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$  ng new my-app --style=scss</span><br></pre></td></tr></table></figure><p>项目创建成功后会提示 <code>Project &#39;my-app&#39; successfully created.</code>，然后进入项目目录并运行试试吧</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$  <span class="built_in">cd</span> my-app &amp;&amp; ng serve -o</span><br></pre></td></tr></table></figure><blockquote><p>更多 Angular CLI 的命令请参考 <a href="https://cli.angular.io/" target="_blank" rel="noopener">Angular CLI 官网</a></p></blockquote><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>如果你对在搭建 Angular 环境中遇到什么问题欢迎给我留言</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://jackytse-me.gz.bcebos.com/angular-development-environment-setup/angular-development-environment-setup-00001.jpg&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;Angular 是一款开源 JavaScript 框架，由Google 维护，用来协助单一页面应用程序运行的。它的目标是增强基于浏览器的应用，使开发和测试变得更加容易。目前最新的 Angular 版本是 &lt;code&gt;v4.2.3&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;开始搭建-Angular-开发环境&quot;&gt;&lt;a href=&quot;#开始搭建-Angular-开发环境&quot; class=&quot;headerlink&quot; title=&quot;开始搭建 Angular 开发环境&quot;&gt;&lt;/a&gt;开始搭建 Angular 开发环境&lt;/h2&gt;&lt;p&gt;搭建 Angular 开发环境需要的步骤：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Node.js&lt;/li&gt;
&lt;li&gt;配置 npm&lt;/li&gt;
&lt;li&gt;Angular CLI&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>发布 Ionic Android 应用</title>
    <link href="http://www.jackytse.me/2017/publish-ionic-android/"/>
    <id>http://www.jackytse.me/2017/publish-ionic-android/</id>
    <published>2017-06-12T06:11:57.000Z</published>
    <updated>2018-12-05T08:14:22.495Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://jackytse-me.gz.bcebos.com/publish-ionic-android/publish-ionic-android-00001.jpg" alt><br>之前介绍了 iOS 应用的打包和发布，这次说说 Android 应用的打包和发布。</p><p>Android 应用的打包和发布相比较 iOS 就要简单很多了，也不需要注册什么开发者账号。</p><a id="more"></a><h2 id="打包-Ionic-应用"><a href="#打包-Ionic-应用" class="headerlink" title="打包 Ionic 应用"></a>打包 Ionic 应用</h2><h4 id="1-生成签名文件"><a href="#1-生成签名文件" class="headerlink" title="#1 生成签名文件"></a>#1 生成签名文件</h4><p>执行以下命令生成签名文件，根据提示输入指定的信息。<code>-alias</code> 是 <code>keystore</code> 的别名，可以自定义；<code>-keyalg</code> 是加密算法，一般为 <code>RSA</code>，<code>-validity</code> 是签名文件的有效期限天数；<code>-keystore</code> 是保存的文件名。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ keytool -genkey -<span class="built_in">alias</span> szmstc.keystore -keyalg RSA -validity 1000 -keystore szmstc.keystore</span><br></pre></td></tr></table></figure></p><p><img src="http://jackytse-me.gz.bcebos.com/publish-ionic-android/publish-ionic-android-00002.png" alt></p><blockquote><p>生成签名所需要的 <code>keytool</code> 工具包含在 <code>jdk</code> 中</p></blockquote><h4 id="2-配置自动签名"><a href="#2-配置自动签名" class="headerlink" title="#2 配置自动签名"></a>#2 配置自动签名</h4><p>将生成的 <code>keystore</code> 文件复制到 <code>platforms/android</code> 目录下，并在此目录下新建一个 <code>release-signing.properties</code> 文件。执行打包命令的时候，<code>gradle</code> 会自动根据此配置文件自动去加载 <code>keystore</code> 文件。</p><p><img src="http://jackytse-me.gz.bcebos.com/publish-ionic-android/publish-ionic-android-00003.png" alt></p><h4 id="3-执行打包命令"><a href="#3-执行打包命令" class="headerlink" title="#3 执行打包命令"></a>#3 执行打包命令</h4><p>添加 <code>--release</code> 参数来打包。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ionic cordova build android --release</span><br></pre></td></tr></table></figure></p><blockquote><p>Ionic CLI 3.0 有一些变化，参考<a href="http://ionicframework.com/docs/cli/cordova/build/" target="_blank" rel="noopener">这里</a></p></blockquote><p><img src="http://jackytse-me.gz.bcebos.com/publish-ionic-android/publish-ionic-android-00004.png" alt></p><p>命令执行成功后，生成的 apk 文件在 platforms/android/build/outputs/apk 目录下，若生成的 apk 文件带有 unsigned 字样，说明自动签名配置有问题，请检查配置。</p><blockquote><p><code>android-x86-release.apk</code> 是用于在 <code>x86</code> 设备或者 <code>x86</code> 虚拟机中运行的文件；<code>android-armv7-release.apk</code> 是用于在大多数手机中运行的文件</p></blockquote><h2 id="发布-Ionic-应用"><a href="#发布-Ionic-应用" class="headerlink" title="发布 Ionic 应用"></a>发布 Ionic 应用</h2><p>#1 将签名过的 apk 文件上传到你的站点</p><p>#2 制作 app 下载页面，将下载链接指向 apk 文件</p><p>#3 如果你愿意，也可以将应用发布到 <code>应用宝</code> 等平台，本文不再介绍</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://jackytse-me.gz.bcebos.com/publish-ionic-android/publish-ionic-android-00001.jpg&quot; alt&gt;&lt;br&gt;之前介绍了 iOS 应用的打包和发布，这次说说 Android 应用的打包和发布。&lt;/p&gt;
&lt;p&gt;Android 应用的打包和发布相比较 iOS 就要简单很多了，也不需要注册什么开发者账号。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>升级到 Ionic 3</title>
    <link href="http://www.jackytse.me/2017/migrate-to-ionic3/"/>
    <id>http://www.jackytse.me/2017/migrate-to-ionic3/</id>
    <published>2017-05-03T01:45:54.000Z</published>
    <updated>2018-12-05T08:14:22.495Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://jackytse-me.gz.bcebos.com/migrate-to-ionic3/migrate-to-ionic3-00001.jpg" alt></p><p>Ionic 3 正式发布已经近一个月了，很多朋友惊呼 Ionic 2 还没上手 Ionic 3 又发布了，会不会又要花很大精力去学习等。认真研究了下，我发现 Ionic 2 到 Ionic 3 的升级只是一些类库的升级，并不需要像 Ionic 1 到 Ionic 2 那样完全重写代码。下面就花点时间给大家介绍下 Ionic 3 的特性以及如何从 Ionic 2 升级到 Ionic 3。</p><h2 id="Ionic-3-的新特性"><a href="#Ionic-3-的新特性" class="headerlink" title="Ionic 3 的新特性"></a>Ionic 3 的新特性</h2><blockquote><p>关于 Ionic 3 的详细说明可以参考<a href="http://blog.ionic.io/ionic-3-0-has-arrived/" target="_blank" rel="noopener">官方博客</a></p></blockquote><h4 id="0-Angular-4"><a href="#0-Angular-4" class="headerlink" title="#0 Angular 4"></a>#0 Angular 4</h4><p>Angular 4 是在3月底发布的。Angular 4 这次更新大致如下：改进 AOT 编译器，分离 animations 包，缩小生成后的代码量，改进 <code>*ngIf</code> 和 <code>*ngFor</code> 等。详细介绍请参<a href="http://angularjs.blogspot.jp/2017/03/angular-400-now-available.html" target="_blank" rel="noopener">这篇文章</a>。</p><a id="more"></a><h4 id="1-兼容-Typescript-2-1-和-2-2"><a href="#1-兼容-Typescript-2-1-和-2-2" class="headerlink" title="#1 兼容 Typescript 2.1 和 2.2"></a>#1 兼容 Typescript 2.1 和 2.2</h4><p>这个其实就是 Angular 4 带来的新特性。</p><h4 id="2-IonicPage-装饰器"><a href="#2-IonicPage-装饰器" class="headerlink" title="#2 IonicPage 装饰器"></a>#2 IonicPage 装饰器</h4><p>IonicPage 装饰器将 URL 注册到特定页面。Ionic 使用了一套叫做 deeplink 的 URL 系统，当使用 NavController push 到新页面时，URL 随之更新。注意这和 URL routing 是不同的。关于 IonicPage 的详细介绍请参考<a href="http://ionicframework.com/docs/api/navigation/IonicPage/" target="_blank" rel="noopener">官方文档</a>。</p><h4 id="3-Lazy-Loading-懒加载"><a href="#3-Lazy-Loading-懒加载" class="headerlink" title="#3 Lazy Loading 懒加载"></a>#3 Lazy Loading 懒加载</h4><p>Lazy Loading 可以在初始化时只加载一些必要的代码，非必要的代码分离出来在需要加载的时候再加载之，理论上能让应用加快一定的启动速度。</p><h2 id="升级到-Ionic-3"><a href="#升级到-Ionic-3" class="headerlink" title="升级到 Ionic 3"></a>升级到 Ionic 3</h2><h4 id="0-修改-npm-依赖包"><a href="#0-修改-npm-依赖包" class="headerlink" title="#0 修改 npm 依赖包"></a>#0 修改 npm 依赖包</h4><p>从 Ionic 2 开始使用了 npm 去管理包，所以我们在 <code>package.json</code> 文件的 <code>dependencies</code> 节点中修改依赖项。</p><ul><li>修改 <code>ionic-angular</code> 到当前最新的 <code>3.1.1</code> 版本。</li><li><code>ionic-angular</code> 依赖 Angular 4.0.2 版本，将所有 <code>@angular/*</code> 开头的包修改为 <code>4.0.2</code> 版本，增加 <code>@angular/animations</code> 包。</li><li>删除 <code>ionic-native</code> 包，添加所需的 <code>@ionic-native/*</code> 包，最新版本为 <code>3.6.1</code></li><li>将 <code>rxjs</code> 修改到依赖的 <code>5.1.1</code> 版本。</li><li>将 <code>zone.js</code> 修改到依赖的 <code>0.8.5</code> 版本。</li></ul><p>修改完成后，执行 <code>npm install</code> 命令，若 npm 仍提示有依赖问题，参考错误提示逐一解决就好。</p><h4 id="1-修改代码以支持-Ionic-Native-3-x"><a href="#1-修改代码以支持-Ionic-Native-3-x" class="headerlink" title="#1 修改代码以支持 Ionic Native 3.x"></a>#1 修改代码以支持 Ionic Native 3.x</h4><p>参考 <a href="http://ionicframework.com/docs/native/" target="_blank" rel="noopener">Ionic Native 文档</a> 修改 <code>StatusBar</code> 和 <code>SplashScreen</code> 的引用方式。</p><h4 id="2-修改代码以支持-Lazy-Loading-非必需"><a href="#2-修改代码以支持-Lazy-Loading-非必需" class="headerlink" title="#2 修改代码以支持 Lazy Loading (非必需)"></a>#2 修改代码以支持 Lazy Loading (非必需)</h4><ul><li>在每个 Page 对应的目录下新建一个 <code>[pagename].module.ts</code> 文件，代码大致如下：<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; NgModule &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; IonicPageModule &#125; <span class="keyword">from</span> <span class="string">'ionic-angular'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Tabs &#125; <span class="keyword">from</span> <span class="string">'./tabs'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  declarations: [</span><br><span class="line">    Tabs,</span><br><span class="line">  ],</span><br><span class="line">  imports: [</span><br><span class="line">    IonicPageModule.forChild(Tabs),</span><br><span class="line">  ],</span><br><span class="line">  exports: [</span><br><span class="line">    Tabs</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AboutModule &#123;&#125;</span><br></pre></td></tr></table></figure></li></ul><p><img src="http://jackytse-me.gz.bcebos.com/migrate-to-ionic3/migrate-to-ionic3-00002.png" alt></p><ul><li>删除项目中所有 Page 的引入，并将对 Page 类的引用修改成对应 Page 的字符串名称。</li></ul><p><img src="http://jackytse-me.gz.bcebos.com/migrate-to-ionic3/migrate-to-ionic3-00003.png" alt></p><h2 id="错误解决"><a href="#错误解决" class="headerlink" title="错误解决"></a>错误解决</h2><p>修改完成后，执行 <code>ionic serve</code> 运行，若有报错，则通过错误信息解决之。<br>我遇到这个错误：<code>“No provider for ApplicationInitStatus!”</code></p><p>解决办法是在 <code>app.module.ts</code> 文件中添加如下引用：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; BrowserModule &#125; <span class="keyword">from</span> <span class="string">'@angular/platform-browser'</span>;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  imports: [</span><br><span class="line">    HttpModule, </span><br><span class="line">    BrowserModule, </span><br><span class="line">    IonicModule.forRoot(MyApp)</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="结束的话"><a href="#结束的话" class="headerlink" title="结束的话"></a>结束的话</h2><p>到 Ionic 3 的升级并不麻烦，却能让你的应用性能有很大的提升，所以这个升级还是值得的。如果你对升级 Ionic 3 有什么疑问欢迎给我留言，你也可以参考我写的<a href="https://github.com/SZMSTC/Sample-PengweiSoft/commit/4d5247330d3695ec57af388d025a9d982846588f" target="_blank" rel="noopener">示例项目</a>去尝试解决问题。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://jackytse-me.gz.bcebos.com/migrate-to-ionic3/migrate-to-ionic3-00001.jpg&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;Ionic 3 正式发布已经近一个月了，很多朋友惊呼 Ionic 2 还没上手 Ionic 3 又发布了，会不会又要花很大精力去学习等。认真研究了下，我发现 Ionic 2 到 Ionic 3 的升级只是一些类库的升级，并不需要像 Ionic 1 到 Ionic 2 那样完全重写代码。下面就花点时间给大家介绍下 Ionic 3 的特性以及如何从 Ionic 2 升级到 Ionic 3。&lt;/p&gt;
&lt;h2 id=&quot;Ionic-3-的新特性&quot;&gt;&lt;a href=&quot;#Ionic-3-的新特性&quot; class=&quot;headerlink&quot; title=&quot;Ionic 3 的新特性&quot;&gt;&lt;/a&gt;Ionic 3 的新特性&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;关于 Ionic 3 的详细说明可以参考&lt;a href=&quot;http://blog.ionic.io/ionic-3-0-has-arrived/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官方博客&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;0-Angular-4&quot;&gt;&lt;a href=&quot;#0-Angular-4&quot; class=&quot;headerlink&quot; title=&quot;#0 Angular 4&quot;&gt;&lt;/a&gt;#0 Angular 4&lt;/h4&gt;&lt;p&gt;Angular 4 是在3月底发布的。Angular 4 这次更新大致如下：改进 AOT 编译器，分离 animations 包，缩小生成后的代码量，改进 &lt;code&gt;*ngIf&lt;/code&gt; 和 &lt;code&gt;*ngFor&lt;/code&gt; 等。详细介绍请参&lt;a href=&quot;http://angularjs.blogspot.jp/2017/03/angular-400-now-available.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这篇文章&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Ionic 2 集成签名板</title>
    <link href="http://www.jackytse.me/2017/using-signaturepad-in-ionic2/"/>
    <id>http://www.jackytse.me/2017/using-signaturepad-in-ionic2/</id>
    <published>2017-04-24T12:01:33.000Z</published>
    <updated>2018-12-05T08:14:22.497Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://jackytse-me.gz.bcebos.com/using-signaturepad-in-ionic2/using-signaturepad-in-ionic2-00001.png" alt></p><p>之前做的一个项目中有一个需求，要让用户在手机上签名并保留笔迹。我的第一反应是，这个用 js 应该能够实现，于是 Google 之，还真让我找到了<a href="https://github.com/szimek/signature_pad" target="_blank" rel="noopener">signature_pad</a>；更加让人高兴的是，Github 上有位老兄把它封装成了 Angular Module <a href="https://github.com/wulfsolter/angular2-signaturepad" target="_blank" rel="noopener">angular2-signaturepad</a>，看来是不用重复造轮子了。</p><a id="more"></a><h2 id="使用-angular2-signaturepad"><a href="#使用-angular2-signaturepad" class="headerlink" title="使用 angular2-signaturepad"></a>使用 angular2-signaturepad</h2><p>链接：<a href="https://www.npmjs.com/package/angular2-signaturepad" target="_blank" rel="noopener">angular2-signaturepad</a></p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>在 Ionic 项目下执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install angular2-signaturepad --save</span><br></pre></td></tr></table></figure><h4 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// import into app module</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> &#123; SignaturePadModule &#125; <span class="keyword">from</span> <span class="string">'angular2-signaturepad'</span>;</span><br><span class="line"> </span><br><span class="line">...</span><br><span class="line"> </span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  declarations: [ ],</span><br><span class="line">  imports: [ SignaturePadModule ],</span><br><span class="line">  providers: [ ],</span><br><span class="line">  bootstrap: [ AppComponent ]</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line"><span class="comment">// then import for use in a component</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> &#123; Component, ViewChild &#125; <span class="keyword">from</span> <span class="string">'angular2/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; SignaturePad &#125; <span class="keyword">from</span> <span class="string">'angular2-signaturepad/signature-pad'</span>;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  template: <span class="string">'&lt;signature-pad [options]="signaturePadOptions" (onBeginEvent)="drawStart()" (onEndEvent)="drawComplete()"&gt;&lt;/signature-pad&gt;'</span></span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> SignaturePadPage&#123;</span><br><span class="line"> </span><br><span class="line">  <span class="meta">@ViewChild</span>(SignaturePad) signaturePad: SignaturePad;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">private</span> signaturePadOptions: <span class="built_in">Object</span> = &#123; <span class="comment">// passed through to szimek/signature_pad constructor</span></span><br><span class="line">    <span class="string">'minWidth'</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="string">'canvasWidth'</span>: <span class="number">500</span>,</span><br><span class="line">    <span class="string">'canvasHeight'</span>: <span class="number">300</span></span><br><span class="line">  &#125;;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// no-op</span></span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  ngAfterViewInit() &#123;</span><br><span class="line">    <span class="comment">// this.signaturePad is now available</span></span><br><span class="line">    <span class="keyword">this</span>.signaturePad.set(<span class="string">'minWidth'</span>, <span class="number">5</span>); <span class="comment">// set szimek/signature_pad options at runtime</span></span><br><span class="line">    <span class="keyword">this</span>.signaturePad.clear(); <span class="comment">// invoke functions from szimek/signature_pad API</span></span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  drawComplete() &#123;</span><br><span class="line">    <span class="comment">// will be notified of szimek/signature_pad's onEnd event</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.signaturePad.toDataURL());</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  drawStart() &#123;</span><br><span class="line">    <span class="comment">// will be notified of szimek/signature_pad's onBegin event</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'begin drawing'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><p>我写了一份示例代码，请参考<a href="https://github.com/SZMSTC/Sample-PengweiSoft/tree/master/src/pages/sample-signaturepad" target="_blank" rel="noopener">这里</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://jackytse-me.gz.bcebos.com/using-signaturepad-in-ionic2/using-signaturepad-in-ionic2-00001.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;之前做的一个项目中有一个需求，要让用户在手机上签名并保留笔迹。我的第一反应是，这个用 js 应该能够实现，于是 Google 之，还真让我找到了&lt;a href=&quot;https://github.com/szimek/signature_pad&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;signature_pad&lt;/a&gt;；更加让人高兴的是，Github 上有位老兄把它封装成了 Angular Module &lt;a href=&quot;https://github.com/wulfsolter/angular2-signaturepad&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;angular2-signaturepad&lt;/a&gt;，看来是不用重复造轮子了。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>发布 Ionic iOS 企业级应用</title>
    <link href="http://www.jackytse.me/2016/publish-ionic-ios-enterprise-deployment/"/>
    <id>http://www.jackytse.me/2016/publish-ionic-ios-enterprise-deployment/</id>
    <published>2016-08-30T08:40:43.000Z</published>
    <updated>2018-12-05T08:14:22.496Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://jackytse-me.gz.bcebos.com/publish-ionic-ios-enterprise-deployment/publish-ionic-ios-enterprise-deployment-00001.jpg" alt><br>Ionic 项目开发完成之后呢，自然就是打包发布了，今天说说 iOS 的打包和发布。<br>iOS 的发布方式分为三种：iOS App Store、In-House、Ad-Hoc。下面我列举了一些主要的区别：</p><table><thead><tr><th>发布类型</th><th>开发者计划</th><th>是否需要苹果审核</th><th>发布方式</th><th>支持安装设备数量</th></tr></thead><tbody><tr><td>iOS App Store</td><td>个人、公司、教育</td><td>需要</td><td>发布到 iOS 应用商店</td><td>无限制</td></tr><tr><td>In-House</td><td>企业开发者计划</td><td>不需要</td><td>发布到网站上给用户下载</td><td>无限制</td></tr><tr><td>Ad-Hoc</td><td>所有</td><td>不需要</td><td>拷贝给用户安装</td><td>100</td></tr></tbody></table><blockquote><p>由于我现在只有企业开发者计划帐号，所以就说说 In-House 的发布吧<br>本文仅适用于企业开发者帐号，个人开发者帐号请略过，本文不适用</p></blockquote><a id="more"></a><h2 id="为项目添加-Provisioning-Profile"><a href="#为项目添加-Provisioning-Profile" class="headerlink" title="为项目添加 Provisioning Profile"></a>为项目添加 Provisioning Profile</h2><ol><li><p>登录<a href="https://developer.apple.com/account/ios/certificate" target="_blank" rel="noopener">苹果开发者网站</a>，找到 Certificates, Identifiers &amp; Profiles 这个页面</p></li><li><p>在页面左侧列表的上边有一个下拉框，选择 “iOS，tvOS，watchOS” 选项</p></li><li><p>点击左侧列表中的 “App IDs” 项打开 iOS App IDs 页面，点击右边的 “+” 按钮添加一个 App ID<br>App ID Description 的 Name 字段填写 App 的名字，我一般都填的英文名<br><img src="http://jackytse-me.gz.bcebos.com/publish-ionic-ios-enterprise-deployment/publish-ionic-ios-enterprise-deployment-00002.png" alt><br>App ID Suffix 选择 “Explicit App ID” 单选按钮，Bundle ID 字段填写一个全球唯一的标识，公司项目就填 “com.公司英文缩写.项目英文缩写”<br><img src="http://jackytse-me.gz.bcebos.com/publish-ionic-ios-enterprise-deployment/publish-ionic-ios-enterprise-deployment-00003.png" alt><br>App Services 那里选择要启用的服务，然后点击下方的 Continue 按钮来到 Confirm your App ID 页面，确认下无误后直接点击下方 Register 按钮完成添加操作</p></li><li><p>点击左侧列表中 Provisioning Profiles 节点下的 Distribution 项打开 iOS Provisioning Profiles(Distribution) 页面，点击右边的 “+” 按钮添加一个 Provisioning Profile<br>在 Select Type 页面选择 Distribution 节点下的 “In House” 单选框，点击下方 Continute<br><img src="http://jackytse-me.gz.bcebos.com/publish-ionic-ios-enterprise-deployment/publish-ionic-ios-enterprise-deployment-00004.png" alt><br>在 Select App ID 页面选择之前添加的 App ID，点击下方 Continute<br><img src="http://jackytse-me.gz.bcebos.com/publish-ionic-ios-enterprise-deployment/publish-ionic-ios-enterprise-deployment-00005.png" alt><br>在 Select Certificates 页面选择企业开发者证书，点击下方 Continute<br><img src="http://jackytse-me.gz.bcebos.com/publish-ionic-ios-enterprise-deployment/publish-ionic-ios-enterprise-deployment-00006.png" alt><br>在 Generate 页面填写 Profile Name，可以跟 App ID 的 Name 一致，点击下方 Continute<br><img src="http://jackytse-me.gz.bcebos.com/publish-ionic-ios-enterprise-deployment/publish-ionic-ios-enterprise-deployment-00007.png" alt><br>Provisioning Profile 生成成功后点击 Download 按钮下载下来然后双击安装即可</p></li></ol><h2 id="打包-Ionic-应用"><a href="#打包-Ionic-应用" class="headerlink" title="打包 Ionic 应用"></a>打包 Ionic 应用</h2><p>iOS 应用的打包很简单：</p><ol><li>使用 XCode 打开 Ionic 项目目录下的 “./platforms/ios/ProjectName.xcodeproj” 文件</li><li>打开 XCode 菜单中的 Preferences 项，在 Accounts 选项卡中添加企业开发者帐号的 Apple ID</li><li>点击 Project Navigator 中的项目文件，在中间 General 选项卡中 Identity 节点下选择 Team 下拉框中选择你的企业帐号</li><li>在 XCode 左上角运行配置那里选中 “Generic iOS Device” 项</li><li>在 XCode 菜单中选择 Product -&gt; Archive 即可</li></ol><h2 id="导出-Ionic-应用"><a href="#导出-Ionic-应用" class="headerlink" title="导出 Ionic 应用"></a>导出 Ionic 应用</h2><ol><li>在 XCode 菜单中选择 Window -&gt; Organizer，在上方选项卡中选择 Archives</li><li><p>在 iOS Apps 列表中选中要发布的应用，在窗口中间选中打好的包，点击窗口右边的 Export 按钮<br><img src="http://jackytse-me.gz.bcebos.com/publish-ionic-ios-enterprise-deployment/publish-ionic-ios-enterprise-deployment-00008.png" alt></p></li><li><p>在 Select a method for export 窗口中选择 Save for Enterprise Deployment，点击 Next<br><img src="http://jackytse-me.gz.bcebos.com/publish-ionic-ios-enterprise-deployment/publish-ionic-ios-enterprise-deployment-00009.png" alt></p></li><li><p>在 Select a Deployment Team 窗口中选择你的开发团队，点击 Choose<br><img src="http://jackytse-me.gz.bcebos.com/publish-ionic-ios-enterprise-deployment/publish-ionic-ios-enterprise-deployment-00010.png" alt></p></li><li><p>在 Deveice Support 窗口选择 Export one app for all compatible devices，如果你发布的应用只针对某个设备，请选择 Export for specific device，并在下拉框中选择设备名称，然后点击 Next</p></li><li><p>在 Summary 窗口中直接点击 Next</p></li><li><p>在 Distrbution manifest infomation 窗口中随便填，能通过验证就行，后面再改</p></li><li><p>选择要导出的位置，点击 Export 导出</p></li></ol><h2 id="发布-Ionic-应用"><a href="#发布-Ionic-应用" class="headerlink" title="发布 Ionic 应用"></a>发布 Ionic 应用</h2><ol><li><p>将导出的 ipa 文件上传到支持 SSL 的站点并记录下 URL</p></li><li><p>修改导出的 plist 文件，找到 software-package 节点，把 ipa 文件的 URL 替换上去，URL 必须是以 https 开头。后面两个图片节点可以注释掉或者删掉</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>kind<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>software-package<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>url<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>https://test.duapp.com/files/app.ipa<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- &lt;dict&gt;</span></span><br><span class="line"><span class="comment">    &lt;key&gt;kind&lt;/key&gt;</span></span><br><span class="line"><span class="comment">    &lt;string&gt;display-image&lt;/string&gt;</span></span><br><span class="line"><span class="comment">    &lt;key&gt;url&lt;/key&gt;</span></span><br><span class="line"><span class="comment">    &lt;string&gt;https://localhost/app.png&lt;/string&gt;</span></span><br><span class="line"><span class="comment">  &lt;/dict&gt;</span></span><br><span class="line"><span class="comment">  &lt;dict&gt;</span></span><br><span class="line"><span class="comment">    &lt;key&gt;kind&lt;/key&gt;</span></span><br><span class="line"><span class="comment">    &lt;string&gt;full-size-image&lt;/string&gt;</span></span><br><span class="line"><span class="comment">    &lt;key&gt;url&lt;/key&gt;</span></span><br><span class="line"><span class="comment">    &lt;string&gt;https://localhost/app.jpg&lt;/string&gt;</span></span><br><span class="line"><span class="comment">  &lt;/dict&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>把 plist 文件也上传到支持 SSL 的站点并记录下 URL</p></li><li><p>制作 app 下载页面，将下载链接指向 plist 文件的 URL 即可。下载链接的示例如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"itms-services://?action=download-manifest&amp;url=https://test.duapp.com/files/manifest.plist"</span>&gt;</span>下载App<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>将 app 下载页面发布到公司网站，在手机中打开站点测试能否成功下载</p><blockquote><p>由于苹果要求 iOS 企业应用发布的站点必须要有 SSL 证书，由于公司的网站不具备条件，所已我将 ipa 文件和 plist 文件上传到了百度云的 BOS 上面</p></blockquote></li></ol><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>如有疑问，请在文章下方留言，我在收到留言后会及时答复您</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://jackytse-me.gz.bcebos.com/publish-ionic-ios-enterprise-deployment/publish-ionic-ios-enterprise-deployment-00001.jpg&quot; alt&gt;&lt;br&gt;Ionic 项目开发完成之后呢，自然就是打包发布了，今天说说 iOS 的打包和发布。&lt;br&gt;iOS 的发布方式分为三种：iOS App Store、In-House、Ad-Hoc。下面我列举了一些主要的区别：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;发布类型&lt;/th&gt;
&lt;th&gt;开发者计划&lt;/th&gt;
&lt;th&gt;是否需要苹果审核&lt;/th&gt;
&lt;th&gt;发布方式&lt;/th&gt;
&lt;th&gt;支持安装设备数量&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;iOS App Store&lt;/td&gt;
&lt;td&gt;个人、公司、教育&lt;/td&gt;
&lt;td&gt;需要&lt;/td&gt;
&lt;td&gt;发布到 iOS 应用商店&lt;/td&gt;
&lt;td&gt;无限制&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;In-House&lt;/td&gt;
&lt;td&gt;企业开发者计划&lt;/td&gt;
&lt;td&gt;不需要&lt;/td&gt;
&lt;td&gt;发布到网站上给用户下载&lt;/td&gt;
&lt;td&gt;无限制&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ad-Hoc&lt;/td&gt;
&lt;td&gt;所有&lt;/td&gt;
&lt;td&gt;不需要&lt;/td&gt;
&lt;td&gt;拷贝给用户安装&lt;/td&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;由于我现在只有企业开发者计划帐号，所以就说说 In-House 的发布吧&lt;br&gt;本文仅适用于企业开发者帐号，个人开发者帐号请略过，本文不适用&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>使用 Ionic 编写移动应用</title>
    <link href="http://www.jackytse.me/2016/start-using-ionic/"/>
    <id>http://www.jackytse.me/2016/start-using-ionic/</id>
    <published>2016-07-18T08:40:29.000Z</published>
    <updated>2018-12-05T08:14:22.496Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://jackytse-me.gz.bcebos.com/start-using-ionic/start-using-ionic-00001.jpg" alt><br>Ionic 这个框架包含了一套精美的相应式 UI 组件、一套基于 AngularJS 的 Javascript 类库，以及一套强大的 CLI 工具。之前介绍了如何搭建 Ionic 的开发环境，下面就来正式创建一个应用吧。</p><h2 id="创建-Ionic-项目"><a href="#创建-Ionic-项目" class="headerlink" title="创建 Ionic 项目"></a>创建 Ionic 项目</h2><p>创建 “ionic start” 命令，template 是创建项目使用的模板，目前官方提供了三个模板：</p><ul><li>tabs（选项卡菜单，默认）</li><li>blank（空模板）</li><li>slidemenu（侧滑菜单）</li></ul><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ionic start myapp [template]</span><br></pre></td></tr></table></figure><p>我使用 tabs 模板创建了一个名为 “Sample-Start-Using-Ionic” 的项目<br><img src="http://jackytse-me.gz.bcebos.com/start-using-ionic/start-using-ionic-00002.png" alt></p><h2 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h2><p><a href="http://ionichina.com/" target="_blank" rel="noopener">IonicChina</a> 社区提供了一套 <a href="http://ionichina.com/api" target="_blank" rel="noopener">API</a>，这里我就用这套 API 写一个获取 topics 的 Demo 吧</p><p>进入项目目录，使用 Sublime Text 打开项目目录，打开 “www/js/app.js” 文件，添加一个新的路由 “tab.topics”<br><img src="http://jackytse-me.gz.bcebos.com/start-using-ionic/start-using-ionic-00004.png" alt></p><p>打开 “www/js/controllers.js” 文件，添加一个新的控制器 “TopicsCtrl”<br><img src="http://jackytse-me.gz.bcebos.com/start-using-ionic/start-using-ionic-00005.png" alt></p><p>打开 “www/js/services.js” 文件，添加一个新的服务 “Topics”，这个服务用到了 $http 和 $q 两个服务，$http 用来请求数据，$q 是用于处理异步请求<br><img src="http://jackytse-me.gz.bcebos.com/start-using-ionic/start-using-ionic-00006.png" alt></p><p>打开 “www/templates/tabs.html” 文件，添加一个新的选项卡 “Topics”，此选项卡会显示在应用底部的 tabs 上<br><img src="http://jackytse-me.gz.bcebos.com/start-using-ionic/start-using-ionic-00007.png" alt></p><p>在 “www/templates/” 目录下新建一个模板文件 “tab-topics.html”，用于显示 topics 列表<br><img src="http://jackytse-me.gz.bcebos.com/start-using-ionic/start-using-ionic-00008.png" alt></p><p>在终端下执行 “ionic serve” 命令，会自动打开浏览器加载这个项目，运行结果如图<br><img src="http://jackytse-me.gz.bcebos.com/start-using-ionic/start-using-ionic-00009.png" alt></p><p>这说明我的模板是没有问题的，离成功又近了一步，打开 “www/js/controllers.js” 文件，修改下 “TopicsCtrl” 文件，在方法参数那里引用 “Topics” 服务，然后调用 Topics.all() 方法并在 Console 里输出试试<br><img src="http://jackytse-me.gz.bcebos.com/start-using-ionic/start-using-ionic-00010.png" alt></p><p><img src="http://jackytse-me.gz.bcebos.com/start-using-ionic/start-using-ionic-00011.png" alt></p><p>一切都在意料之中，从 topics API 抓取到的数据正常显示在了 Console 里，在 “www/js/controllers.js” 文件里添加一个 $scope.topics 变量，用来传递到对应的模板中<br><img src="http://jackytse-me.gz.bcebos.com/start-using-ionic/start-using-ionic-00012.png" alt></p><p>修改 “www/templates/tab-topics.html” 文件，使用 ng-repeat 属性来遍历 topics，使用两个花括号进行数据绑定</p><blockquote><p>注意：这里的 img 标签要使用 ng-src 属性来绑定，不能用两个花括号绑定，否则会在运行时导致一个错误</p></blockquote><p><img src="http://jackytse-me.gz.bcebos.com/start-using-ionic/start-using-ionic-00013.png" alt></p><p>浏览器自动刷新页面后，正确的数据已经显示出来了，到此已经成功了一半<br><img src="http://jackytse-me.gz.bcebos.com/start-using-ionic/start-using-ionic-00014.png" alt></p><p>下面再写一个显示 topic 详细的页面，打开 “www/js/app.js” 文件，添加一个新的路由 “tab.topic-detail”，“:topicId” 用来匹配传递的参数，可以在控制器中使用 $stateParams 服务去捕获<br><img src="http://jackytse-me.gz.bcebos.com/start-using-ionic/start-using-ionic-00015.png" alt></p><p>打开 “www/js/services.js” 文件，修改 all() 方法，将抓取到的数据保存在一个变量里，然后再添加一个 findById(id) 方法，用来获取对应 id 的 topic<br><img src="http://jackytse-me.gz.bcebos.com/start-using-ionic/start-using-ionic-00016.png" alt></p><p>打开 “www/js/controllers.js” 文件，添加一个新的控制器 “TopicDetailCtrl”，内容如下<br><img src="http://jackytse-me.gz.bcebos.com/start-using-ionic/start-using-ionic-00017.png" alt></p><p>修改 “www/templates/tab-topics.html” 文件，修改列表的 href 属性，指向 “tab.topic-detail” 这个路由，并传递当前 topic 的 id 值<br><img src="http://jackytse-me.gz.bcebos.com/start-using-ionic/start-using-ionic-00018.png" alt></p><p>在 “www/templates/” 目录下新建一个模板文件 “topic-detail.html”，用于显示 topic 详细信息，注意 ng-bind-html 的用法，这个属性用于绑定 html 内容到页面中<br><img src="http://jackytse-me.gz.bcebos.com/start-using-ionic/start-using-ionic-00019.png" alt></p><p>浏览器自动刷新之后，点击 topics 列表中第一项，成功打开了 topic 的详细页面<br><img src="http://jackytse-me.gz.bcebos.com/start-using-ionic/start-using-ionic-00020.png" alt></p><p>至此，这个简单的 Demo 就完成了，所有代码已上传到 <a href="https://github.com/jackytse/Sample-Start-Using-Ionic" target="_blank" rel="noopener">我的 Github</a>，如有疑问，欢迎在文章下方留言，我在收到留言后会及时答复您</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://jackytse-me.gz.bcebos.com/start-using-ionic/start-using-ionic-00001.jpg&quot; alt&gt;&lt;br&gt;Ionic 这个框架包含了一套精美的相应式 UI 组件、一套基于 AngularJS 的 Javascript 类库，以及一套强大的 CLI 工具。之前介绍了如何搭建 Ionic 的开发环境，下面就来正式创建一个应用吧。&lt;/p&gt;
&lt;h2 id=&quot;创建-Ionic-项目&quot;&gt;&lt;a href=&quot;#创建-Ionic-项目&quot; class=&quot;headerlink&quot; title=&quot;创建 Ionic 项目&quot;&gt;&lt;/a&gt;创建 Ionic 项目&lt;/h2&gt;&lt;p&gt;创建 “ionic start” 命令，template 是创建项目使用的模板，目前官方提供了三个模板：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;tabs（选项卡菜单，默认）&lt;/li&gt;
&lt;li&gt;blank（空模板）&lt;/li&gt;
&lt;li&gt;slidemenu（侧滑菜单）&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Ionic 开发环境搭建（macOS）</title>
    <link href="http://www.jackytse.me/2016/ionic-development-environment-setup-macosx/"/>
    <id>http://www.jackytse.me/2016/ionic-development-environment-setup-macosx/</id>
    <published>2016-07-09T08:40:14.000Z</published>
    <updated>2018-12-05T08:14:22.495Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://jackytse-me.gz.bcebos.com/ionic-development-environment-setup-macosx/ionic-dev-env-setup-macosx-00001.jpg" alt><br>在上一篇文章中介绍了 <a href="https://www.jackytse.me/2016/ionic-development-environment-setup-windows/">Windows 下 Ionic 开发环境的搭建</a>，这篇文章主要介绍 macOS 下 Ionic 环境搭建</p><h2 id="开始安装-Ionic"><a href="#开始安装-Ionic" class="headerlink" title="开始安装 Ionic"></a>开始安装 Ionic</h2><p>Ionic 的开发环境需要安装的组件：</p><ul><li>Node.js</li><li>Cordova &amp; Ionic CLI</li><li>Java SDK</li><li>Android SDK</li></ul><a id="more"></a><h5 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a>安装 Node.js</h5><p>前往 <a href="http://nodejs.org/" target="_blank" rel="noopener">Node.js 官网</a>下载 Node.js 安装包直接安装，我下载的是 v4.4.5 LTS，通过官网下载到的是 pkg 包，鼠标双击安装即可</p><blockquote><p>由于之前我用 Homebrew 遇到过这样那样的问题，所以果断改用官网提供的 pkg 包来安装了，喜欢折腾的朋友可以使用 Homebrew 或者其它方式去安装</p></blockquote><p>安装完成后打开终端输入 “node -v” 命令测试下是否安装成功<br><img src="http://jackytse-me.gz.bcebos.com/ionic-development-environment-setup-macosx/ionic-dev-env-setup-macosx-00002.png" alt></p><h5 id="更新-npm（可选）"><a href="#更新-npm（可选）" class="headerlink" title="更新 npm（可选）"></a>更新 npm（可选）</h5><p>在终端输入 “npm i npm -g” 命令更新npm<br><img src="http://jackytse-me.gz.bcebos.com/ionic-development-environment-setup-macosx/ionic-dev-env-setup-macosx-00003.png" alt></p><h5 id="安装-Cordova-amp-Ionic-CLI"><a href="#安装-Cordova-amp-Ionic-CLI" class="headerlink" title="安装 Cordova &amp; Ionic CLI"></a>安装 Cordova &amp; Ionic CLI</h5><p>在终端输入 “npm i cordova ionic -g” 命令，等待安装完成；安装完成后，输入 “cordova -v” 命令和 “ionic -v” 命令，能正常显示版本号说明安装成功<br><img src="http://jackytse-me.gz.bcebos.com/ionic-development-environment-setup-macosx/ionic-dev-env-setup-macosx-00004.png" alt></p><h5 id="安装-Java-SDK-jdk"><a href="#安装-Java-SDK-jdk" class="headerlink" title="安装 Java SDK (jdk)"></a>安装 Java SDK (jdk)</h5><p>前往 <a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="noopener">Oracle 官网</a>下载最新的 jdk 安装，我下载的是 “jdk-8u91-macosx-x86.dmg”</p><p>为 jdk 设置系统环境变量</p><p>安装好 jdk 之后，在终端输入 “vim ~/.bash_profile” 打开 vim 来编辑 “.bash_profile” 文件，增加一行 “export JAVA_HOME=$(/usr/libexec/java_home)”，建议和其它 export 项放在一起便于维护<br><img src="http://jackytse-me.gz.bcebos.com/ionic-development-environment-setup-macosx/ionic-dev-env-setup-macosx-00005.png" alt></p><blockquote><p>不熟悉 vim 操作的朋友可以参考这个 <a href="http://www.cnblogs.com/onlyfu/p/5046910.html" target="_blank" rel="noopener">vim 教程</a></p></blockquote><h5 id="安装-Android-SDK"><a href="#安装-Android-SDK" class="headerlink" title="安装 Android SDK"></a>安装 Android SDK</h5><p>前往 <a href="https://developer.android.com/studio/index.html" target="_blank" rel="noopener">Android 官网（需要翻墙）</a> 下载最新的 Android SDK 安装，目前最新的版本是 r24.4.1；你也可以复制 <a href="https://dl.google.com/android/android-sdk_r24.4.1-macosx.zip" target="_blank" rel="noopener">这个链接</a>，然后使用迅雷下载，然后解压到 “/Developer” 目录下<br><img src="http://jackytse-me.gz.bcebos.com/ionic-development-environment-setup-macosx/ionic-dev-env-setup-macosx-00006.png" alt></p><h5 id="为-Android-SDK-设置系统环境变量"><a href="#为-Android-SDK-设置系统环境变量" class="headerlink" title="为 Android SDK 设置系统环境变量"></a>为 Android SDK 设置系统环境变量</h5><p>在终端输入 “vim ~/.bash_profile” 打开 vim 来编辑 .bash_profile 文件，增加一行 “export ANDROID_HOME=/Developer/android-sdk-macosx”，和一行 “export PATH=${PATH}:${ANDROID_HOME}/tools:${ANDROID_HOME}/platform-tools/”<br><img src="http://jackytse-me.gz.bcebos.com/ionic-development-environment-setup-macosx/ionic-dev-env-setup-macosx-00007.png" alt></p><p>设置完成后打开终端，输入 “android” 命令，能打开 Android SDK Manager 窗口说明安装成功<br><img src="http://jackytse-me.gz.bcebos.com/ionic-development-environment-setup-macosx/ionic-dev-env-setup-macosx-00008.png" alt></p><h5 id="使用-Android-SDK-Manager-安装所需组件"><a href="#使用-Android-SDK-Manager-安装所需组件" class="headerlink" title="使用 Android SDK Manager 安装所需组件"></a>使用 Android SDK Manager 安装所需组件</h5><p>Android SDK 各版本的 SDK Platform 和 Tools 并没有内置在 Android SDK 中，所有我们要通过 Android SDK Manager 来安装。打开 Android SDK Manager 后，选择要安装的组件<br>由于我一般是用真实 Android 设备来开发，所以我只选择了 Android SDK Tools、Android SDK Platform-tools、Android SDK Build-tools、Android Support Repository，以及Android API 19-24 的 SDK Platform</p><blockquote><p>如果要使用 Android 内置的虚拟机来运行 App 的话，还需要下载对应版本的 System Image，这里我们不再赘述</p></blockquote><p>点击 Install 按钮，等待安装完成<br><img src="http://jackytse-me.gz.bcebos.com/ionic-development-environment-setup-macosx/ionic-dev-env-setup-macosx-00009.png" alt></p><p>到此，Ionic 开发环境已安装完毕！</p><h2 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h2><p>安装完开发环境后，我们通过一个 Demo 来测试一下环境<br>打开终端，创建一个项目<br><img src="http://jackytse-me.gz.bcebos.com/ionic-development-environment-setup-macosx/ionic-dev-env-setup-macosx-00010.png" alt></p><p>项目创建完成后，Ionic 会自动添加一个 ios platform，所以无需重复添加<br><img src="http://jackytse-me.gz.bcebos.com/ionic-development-environment-setup-macosx/ionic-dev-env-setup-macosx-00011.png" alt></p><p>运行一下试试<br><img src="http://jackytse-me.gz.bcebos.com/ionic-development-environment-setup-macosx/ionic-dev-env-setup-macosx-00012.png" alt></p><p>运行成功！<br><img src="http://jackytse-me.gz.bcebos.com/ionic-development-environment-setup-macosx/ionic-dev-env-setup-macosx-00013.png" alt></p><p>可能存在的问题</p><ul><li>使用 npm 全局安装时提示权限错误<br>解决这个问题的办法可以参考 <a href="http://www.jianshu.com/p/050f74cc7d45" target="_blank" rel="noopener">这篇文章</a></li></ul><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>本文写给 Ionic 入门开发者，有开发经验者可以略过<br>如在安装过程中遇到问题，请在文章下方留言，我在收到留言后会及时答复您</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://jackytse-me.gz.bcebos.com/ionic-development-environment-setup-macosx/ionic-dev-env-setup-macosx-00001.jpg&quot; alt&gt;&lt;br&gt;在上一篇文章中介绍了 &lt;a href=&quot;https://www.jackytse.me/2016/ionic-development-environment-setup-windows/&quot;&gt;Windows 下 Ionic 开发环境的搭建&lt;/a&gt;，这篇文章主要介绍 macOS 下 Ionic 环境搭建&lt;/p&gt;
&lt;h2 id=&quot;开始安装-Ionic&quot;&gt;&lt;a href=&quot;#开始安装-Ionic&quot; class=&quot;headerlink&quot; title=&quot;开始安装 Ionic&quot;&gt;&lt;/a&gt;开始安装 Ionic&lt;/h2&gt;&lt;p&gt;Ionic 的开发环境需要安装的组件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Node.js&lt;/li&gt;
&lt;li&gt;Cordova &amp;amp; Ionic CLI&lt;/li&gt;
&lt;li&gt;Java SDK&lt;/li&gt;
&lt;li&gt;Android SDK&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>macOS 下 ASP.NET Core 初体验</title>
    <link href="http://www.jackytse.me/2016/getting-started-aspnet-core-macos/"/>
    <id>http://www.jackytse.me/2016/getting-started-aspnet-core-macos/</id>
    <published>2016-07-01T08:39:56.000Z</published>
    <updated>2018-12-05T08:14:22.494Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://jackytse-me.gz.bcebos.com/getting-started-aspnet-core-macos/getting-started-aspnet-core-macos-00001.png" alt><br>2016年6月28日微软在 RedHat 峰会上发布了 .NET Core 1.0、ASP.NET Core 1.0 和 Entity Framework Core 1.0。Net Core 是 .Net 基金会推出的新一代 .Net 平台，能支持 Windows、macOS 和 Linux 平台。Windows 平台下使用 Visual Studio 2015 就可以创建和打开 ASP.NET Core 项目了，今天试试在 macOS 下体验 ASP.NET Core</p><h2 id="安装-Net-Core-SDK"><a href="#安装-Net-Core-SDK" class="headerlink" title="安装 .Net Core SDK"></a>安装 .Net Core SDK</h2><p>.Net Core SDK 要求 macOS 必须是10.11 (El Capitan) 或者更高版本，幸好我一直都是用最新的系统</p><p>安装 .Net Core SDK 之前要先通过 <a href="http://brew.sh/" target="_blank" rel="noopener">Homebrew</a> 安装 OpenSSL<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ brew update</span><br><span class="line">$ brew install openssl</span><br><span class="line">$ brew link --force openssl</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>下载安装 <a href="https://go.microsoft.com/fwlink/?LinkID=809124" target="_blank" rel="noopener">.Net Core SDK</a> ，目前微软在 macOS 平台下只发布了 .Net Core 的正式版本1.0，.Net Core SDK 能下载到的依旧是 Preview 2 的版本，相信 .Net Core SDK 正式版本很快会发布</p><blockquote><p>参考：<a href="https://www.microsoft.com/net/core" target="_blank" rel="noopener">.Net Core</a></p></blockquote><h2 id="第一个-ASP-Net-Core-应用"><a href="#第一个-ASP-Net-Core-应用" class="headerlink" title="第一个 ASP.Net Core 应用"></a>第一个 ASP.Net Core 应用</h2><p>安装好 .Net Core SDK 之后开始创建一个 Hello World 应用吧<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir aspnetcoreapp</span><br><span class="line">$ <span class="built_in">cd</span> aspnetcoreapp</span><br><span class="line">$ dotnet new</span><br></pre></td></tr></table></figure></p><p>更新项目目录下的 “project.json” 文件，增加 Kestrel HTTP server 包到 dependencies 中<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0-*"</span>,</span><br><span class="line">  <span class="attr">"buildOptions"</span>: &#123;</span><br><span class="line">    <span class="attr">"debugType"</span>: <span class="string">"portable"</span>,</span><br><span class="line">    <span class="attr">"emitEntryPoint"</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"Microsoft.NETCore.App"</span>: &#123;</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"platform"</span>,</span><br><span class="line">      <span class="attr">"version"</span>: <span class="string">"1.0.0"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"Microsoft.AspNetCore.Server.Kestrel"</span>: <span class="string">"1.0.0"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"frameworks"</span>: &#123;</span><br><span class="line">    <span class="attr">"netcoreapp1.0"</span>: &#123;</span><br><span class="line">      <span class="attr">"dependencies"</span>: &#123;</span><br><span class="line">        <span class="attr">"Microsoft.NETCore.App"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"platform"</span>,</span><br><span class="line">          <span class="attr">"version"</span>: <span class="string">"1.0.0"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"imports"</span>: <span class="string">"dnxcore50"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>执行 dotnet restore 命令，安装依赖包<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ dotnet restore</span><br></pre></td></tr></table></figure></p><p>在项目目录下添加 “Startup.cs” 文件，代码如下：<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Builder;</span><br><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Hosting;</span><br><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Http;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">aspnetcoreapp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Startup</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">IApplicationBuilder app</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            app.Run(context =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> context.Response.WriteAsync(<span class="string">"Hello from ASP.NET Core!"</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>更新项目目录下的 “Program.cs” 文件，代码如下：<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Hosting;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApplication</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> host = <span class="keyword">new</span> WebHostBuilder()</span><br><span class="line">                .UseKestrel()</span><br><span class="line">                .UseStartup&lt;Startup&gt;()</span><br><span class="line">                .Build();</span><br><span class="line">            host.Run();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在终端执行 “dotnet run” 命令运行我们创建的应用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ dotnet run</span><br></pre></td></tr></table></figure></p><p>第一个 ASP.NET Core 引用已经运行起来了！<br><img src="http://jackytse-me.gz.bcebos.com/getting-started-aspnet-core-macos/getting-started-aspnet-core-macos-00002.png" alt></p><p><img src="http://jackytse-me.gz.bcebos.com/getting-started-aspnet-core-macos/getting-started-aspnet-core-macos-00003.png" alt></p><blockquote><p>参考：<a href="https://docs.asp.net/en/latest/getting-started.html" target="_blank" rel="noopener">ASP.NET Core 入门</a></p></blockquote><h2 id="使用-Xamarin-Studio-作为-ASP-NET-Core-的集成开发工具"><a href="#使用-Xamarin-Studio-作为-ASP-NET-Core-的集成开发工具" class="headerlink" title="使用 Xamarin Studio 作为 ASP.NET Core 的集成开发工具"></a>使用 Xamarin Studio 作为 ASP.NET Core 的集成开发工具</h2><p>下载和安装最新版本的 <a href="https://www.xamarin.com/" target="_blank" rel="noopener">Xamarin Studio</a></p><blockquote><p>由于 Xamarin Studio 是在线安装的，再加上国内网络环境的原因，我们很难在线安装好它<br>这里我推荐一个 Xamarin Installtion Mainifest，直接用下载软件下载所需组件并安装</p></blockquote><h5 id="安装开发所需-Add-ins"><a href="#安装开发所需-Add-ins" class="headerlink" title="安装开发所需 Add-ins"></a>安装开发所需 Add-ins</h5><p>打开 Xamarin Studio，点击菜单 Xamarin Studio 下的 Add-ins，在 Add-in Manger 里点击 Gallery 选项卡，点击 Repository 下拉菜单，选择 Manage Repositories ，勾选上 Xamarin Studio Add-in Repository(Alpha channel)，然后关闭窗口<br><img src="http://jackytse-me.gz.bcebos.com/getting-started-aspnet-core-macos/getting-started-aspnet-core-macos-00004.png" alt></p><p>在 Add-in Manger 里点击 Repository 下拉菜单，选择 Xamarin Studio Add-in Repository(Alpha channel)，在 IDE extensions 节点下找到 DNX 和 VSCodeDebugger 并安装<br><img src="http://jackytse-me.gz.bcebos.com/getting-started-aspnet-core-macos/getting-started-aspnet-core-macos-00005.png" alt></p><blockquote><p>DNX 为 Xamarin Studio 增加创建 .Net Core 项目的功能，VSCodeDebugger 为 Xamarin Studio 增加.Net Core 项目的调试功能</p></blockquote><h5 id="使用-Xamarin-Studio"><a href="#使用-Xamarin-Studio" class="headerlink" title="使用 Xamarin Studio"></a>使用 Xamarin Studio</h5><p>安装好 Add-ins 后，重新启动 Xamarin，点击菜单 File -&gt; New -&gt; Solution，点击 Other 的列表项中的 .Net Core，我们看到这里可以创建 .Net Core 控制台应用 和 .Net Core Web 应用了<br><img src="http://jackytse-me.gz.bcebos.com/getting-started-aspnet-core-macos/getting-started-aspnet-core-macos-00006.png" alt></p><p>我直接从 Github 上拉取了一个 asp.net 的经典 Sample - <a href="https://github.com/aspnet/MusicStore" target="_blank" rel="noopener">MusicStore</a>，这个 Sample 是基于 ASP.Net 5（ASP.NET Core 之前的名字）创建的，然后双击 MusicStore 目录下的 MusicStore.sln 文件，直接使用 Xamarin Studio 打开了该解决方案。不过这里报了一个错误，可能由于这个项目是在 Windows 下创建的，有一些不兼容吧。不过后面我发现这没什么影响，因为只有一个叫 MusicStore.Standalone 的项目没有正确加载，MusicStroe 这个主要项目正确加载了<br><img src="http://jackytse-me.gz.bcebos.com/getting-started-aspnet-core-macos/getting-started-aspnet-core-macos-00007.png" alt></p><p>直接点运行，是可以运行成功的，然后打开 Safari，输入 <a href="http://localhost:5000" target="_blank" rel="noopener">http://localhost:5000</a> 可以正常打开 Music Store，Yes！<br><img src="http://jackytse-me.gz.bcebos.com/getting-started-aspnet-core-macos/getting-started-aspnet-core-macos-00008.png" alt></p><p>随便点了几下，功能基本正常，不过由于 macOS 下没有 SQL Server LocalDB，所以 MusicStore 使用的是内存数据库，也就是说重新启动应用后，之前的用户数据会丢失<br>我在 Register 里下了一个断点，然后注册个用户，断点这里是可以正常停下并获取到刚才输入的信息，调试也基本正常了<br><img src="http://jackytse-me.gz.bcebos.com/getting-started-aspnet-core-macos/getting-started-aspnet-core-macos-00009.png" alt></p><p>由于 Xamarin Studio 原生支持 Git，所以咱们开发的项目可以直接 Push 到远端仓库中，这样一来，使用 Xamarin Studio 进行 ASP.NET Core 应用的开发、调试、部署都没啥打问题了</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>微软从认为 Linux 和开源是“癌症”，到现在拥抱 Linux 和开源，经历了很长一段时间，期望微软在开源领域再创辉煌，也希望越来越多的 Coder 去关注和使用 .Net 技术，因为它真的很棒</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://jackytse-me.gz.bcebos.com/getting-started-aspnet-core-macos/getting-started-aspnet-core-macos-00001.png&quot; alt&gt;&lt;br&gt;2016年6月28日微软在 RedHat 峰会上发布了 .NET Core 1.0、ASP.NET Core 1.0 和 Entity Framework Core 1.0。Net Core 是 .Net 基金会推出的新一代 .Net 平台，能支持 Windows、macOS 和 Linux 平台。Windows 平台下使用 Visual Studio 2015 就可以创建和打开 ASP.NET Core 项目了，今天试试在 macOS 下体验 ASP.NET Core&lt;/p&gt;
&lt;h2 id=&quot;安装-Net-Core-SDK&quot;&gt;&lt;a href=&quot;#安装-Net-Core-SDK&quot; class=&quot;headerlink&quot; title=&quot;安装 .Net Core SDK&quot;&gt;&lt;/a&gt;安装 .Net Core SDK&lt;/h2&gt;&lt;p&gt;.Net Core SDK 要求 macOS 必须是10.11 (El Capitan) 或者更高版本，幸好我一直都是用最新的系统&lt;/p&gt;
&lt;p&gt;安装 .Net Core SDK 之前要先通过 &lt;a href=&quot;http://brew.sh/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Homebrew&lt;/a&gt; 安装 OpenSSL&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ brew update&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ brew install openssl&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ brew link --force openssl&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Ionic 开发环境搭建（Windows）</title>
    <link href="http://www.jackytse.me/2016/ionic-development-environment-setup-windows/"/>
    <id>http://www.jackytse.me/2016/ionic-development-environment-setup-windows/</id>
    <published>2016-06-23T08:33:21.000Z</published>
    <updated>2018-12-05T08:14:22.495Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Ionic-概述"><a href="#Ionic-概述" class="headerlink" title="Ionic 概述"></a>Ionic 概述</h2><p>Ionic 官网：<a href="http://www.ionicframework.com/" target="_blank" rel="noopener">http://www.ionicframework.com/</a><br>Ionic 是一个强大的 HTML5 SDK，它使用 HTML、CSS、Javascript 等 web 技术帮助你快速构建原生风格的移动应用<br>Ionic 目前能支持 iOS 和 Android </p><h2 id="与-Cordova-的关系"><a href="#与-Cordova-的关系" class="headerlink" title="与 Cordova 的关系"></a>与 Cordova 的关系</h2><p>Ionic 是基于 Cordova 的，在 Cordova 上能用的一切同样可以在 Ionic 上使用<br>Ionic 在 Cordova 基础上增加了 Ionic UI、AngularJS、一个强大的 CLI 工具和一些云端服务等</p><a id="more"></a><h2 id="安装-Ionic"><a href="#安装-Ionic" class="headerlink" title="安装 Ionic"></a>安装 Ionic</h2><p>Ionic 的开发环境离不开下列组件：</p><ul><li>Node.js</li><li>Cordova &amp; Ionic CLI</li><li>Java SDK</li><li>Android SDK</li></ul><h5 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a>安装 Node.js</h5><p>前往 <a href="http://nodejs.org/" target="_blank" rel="noopener">Node.js 官网</a>下载 Node.js 安装包直接安装，建议下载 LTS 版本，笔者安装的是 v4.4.5 LTS<br>安装的过程中默认勾选的“Add to PATH”选项不要取消<br><img src="http://jackytse-me.gz.bcebos.com/ionic-development-environment-setup-windows/ionic-development-environment-setup-windows-00001.png" alt></p><p>安装完成后打开终端，输入“node -v”命令，能正常显示版本号说明安装成功<br><img src="http://jackytse-me.gz.bcebos.com/ionic-development-environment-setup-windows/ionic-development-environment-setup-windows-00002.png" alt></p><h5 id="安装-cnpm-可选"><a href="#安装-cnpm-可选" class="headerlink" title="安装 cnpm (可选)"></a>安装 cnpm (可选)</h5><p>npm 是 Node.js 的包管理器，由于我大天朝网络环境的原因，在使用 npm 的时候经常无法安装包或者下载很慢<br>于是我们需要一个 npm 的中国镜像，cnpm 是淘宝的 npm 镜像，10分钟同步一次<br>以管理员身份打开终端，输入“npm i cnpm -g”命令，等待安装完成<br><img src="http://jackytse-me.gz.bcebos.com/ionic-development-environment-setup-windows/ionic-development-environment-setup-windows-00003.png" alt></p><p>安装完成后，输入“cnpm -v”命令，能正常显示版本号说明安装成功<br><img src="http://jackytse-me.gz.bcebos.com/ionic-development-environment-setup-windows/ionic-development-environment-setup-windows-00004.png" alt></p><h5 id="安装-Cordova-amp-Ionic-CLI"><a href="#安装-Cordova-amp-Ionic-CLI" class="headerlink" title="安装 Cordova &amp; Ionic CLI"></a>安装 Cordova &amp; Ionic CLI</h5><p>以管理员身份打开终端，输入“npm i cordova ionic -g”命令，等待安装完成</p><blockquote><p>如果安装了 cnpm，可以使用“cnpm i cordova ionic -g”命令</p></blockquote><p><img src="http://jackytse-me.gz.bcebos.com/ionic-development-environment-setup-windows/ionic-development-environment-setup-windows-00005.png" alt></p><p>安装完成后，输入“cordova -v”命令和“ionic -v”命令，能正常显示版本号说明安装成功<br><img src="http://jackytse-me.gz.bcebos.com/ionic-development-environment-setup-windows/ionic-development-environment-setup-windows-00006.png" alt></p><h5 id="安装-Java-SDK-jdk"><a href="#安装-Java-SDK-jdk" class="headerlink" title="安装 Java SDK (jdk)"></a>安装 Java SDK (jdk)</h5><p>前往 <a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="noopener">Oracle 官网</a>下载最新的 jdk 安装，我下载的是 jdk 8u91 windows x86 的版本</p><blockquote><p>由于很多依赖 Java 的项目都不支持64位的 jdk，所以建议大家下载安装 x86 版本<br>安装过程中可以只安装 jdk，不安装 jre 和源代码</p></blockquote><p><img src="http://jackytse-me.gz.bcebos.com/ionic-development-environment-setup-windows/ionic-development-environment-setup-windows-00007.png" alt></p><h5 id="为-jdk-设置系统环境变量"><a href="#为-jdk-设置系统环境变量" class="headerlink" title="为 jdk 设置系统环境变量"></a>为 jdk 设置系统环境变量</h5><p>打开系统属性，在“高级”选项卡中找到环境变量，单击打开“环境变量”设置窗口<br><img src="http://jackytse-me.gz.bcebos.com/ionic-development-environment-setup-windows/ionic-development-environment-setup-windows-00008.png" alt></p><p>在“系统变量”列表中新建一个系统变量“JAVA_HOME”，值为刚才安装的 jdk 的路径<br><img src="http://jackytse-me.gz.bcebos.com/ionic-development-environment-setup-windows/ionic-development-environment-setup-windows-00009.png" alt></p><p>在“系统变量”列表中找到“Path”变量，双击打开“编辑系统变量”窗口<br>将 jdk 的 bin 路径添加至“变量值”末尾并保存<br><img src="http://jackytse-me.gz.bcebos.com/ionic-development-environment-setup-windows/ionic-development-environment-setup-windows-00010.png" alt></p><p>安装完成后打开终端，输入“java -version”命令，能正常显示版本号说明安装成功<br><img src="http://jackytse-me.gz.bcebos.com/ionic-development-environment-setup-windows/ionic-development-environment-setup-windows-00011.png" alt></p><h5 id="安装-Android-SDK"><a href="#安装-Android-SDK" class="headerlink" title="安装 Android SDK"></a>安装 Android SDK</h5><p>前往 <a href="https://developer.android.com/studio/index.html" target="_blank" rel="noopener">Android 官网</a>下载最新的 Android SDK 安装，目前最新的版本是 r24.4.1，我下载的是 zip 版本<br>下载完后解压到“C:\Program Files(x86)\Android\”目录下<br><img src="http://jackytse-me.gz.bcebos.com/ionic-development-environment-setup-windows/ionic-development-environment-setup-windows-00012.png" alt></p><h5 id="为-Android-SDK-设置系统环境变量"><a href="#为-Android-SDK-设置系统环境变量" class="headerlink" title="为 Android SDK 设置系统环境变量"></a>为 Android SDK 设置系统环境变量</h5><p>在“系统变量”列表中新建一个系统变量“ADT_HOME”，值为刚才安装的 Android SDK 的路径<br><img src="http://jackytse-me.gz.bcebos.com/ionic-development-environment-setup-windows/ionic-development-environment-setup-windows-00013.png" alt></p><p>在“系统变量”列表中找到“Path”变量，双击打开“编辑系统变量”窗口<br>将 Android SDK 的 tools 和 platform-tools 路径添加至“变量值”末尾并保存<br><img src="http://jackytse-me.gz.bcebos.com/ionic-development-environment-setup-windows/ionic-development-environment-setup-windows-00014.png" alt></p><p><img src="http://jackytse-me.gz.bcebos.com/ionic-development-environment-setup-windows/ionic-development-environment-setup-windows-00015.png" alt></p><p>设置完成后打开终端，输入“android”命令，能打开 Android SDK Manager 窗口说明安装成功<br><img src="http://jackytse-me.gz.bcebos.com/ionic-development-environment-setup-windows/ionic-development-environment-setup-windows-00016.png" alt></p><h5 id="使用-Android-SDK-Manager-安装所需组件"><a href="#使用-Android-SDK-Manager-安装所需组件" class="headerlink" title="使用 Android SDK Manager 安装所需组件"></a>使用 Android SDK Manager 安装所需组件</h5><p>Android SDK 各版本的 SDK Platform 和 Tools 并没有内置在 Android SDK 中，所有我们要通过 Android SDK Manager 来安装<br>打开 Android SDK Manager 后，选择要安装的组件<br>由于我一般是用真实 Android 设备来开发，所以我只选择了 Android SDK Tools、Android SDK Platform-tools、Android SDK Build-tools、Android Support Repository、Google USB Driver，以及Android API 19-24 的 SDK Platform</p><blockquote><p>如果要使用 Android 内置的虚拟机来运行 App 的话，还需要下载对应版本的 System Image，这里我们不再赘述</p></blockquote><p>点击 Install 按钮，等待安装完成<br><img src="http://jackytse-me.gz.bcebos.com/ionic-development-environment-setup-windows/ionic-development-environment-setup-windows-00017.png" alt></p><p>到此，Ionic 开发环境已安装完毕！</p><h2 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h2><p>安装完开发环境后，我们通过一个 Demo 来测试一下环境<br>打开终端，创建一个项目<br><img src="http://jackytse-me.gz.bcebos.com/ionic-development-environment-setup-windows/ionic-development-environment-setup-windows-00018.png" alt></p><p>等待创建完成，添加 android platform<br><img src="http://jackytse-me.gz.bcebos.com/ionic-development-environment-setup-windows/ionic-development-environment-setup-windows-00019.png" alt></p><p>添加完成后，将 Android 手机通过 USB 线连接至电脑，然后在手机上运行项目<br><img src="http://jackytse-me.gz.bcebos.com/ionic-development-environment-setup-windows/ionic-development-environment-setup-windows-00020.png" alt></p><p>运行成功！<br><img src="http://jackytse-me.gz.bcebos.com/ionic-development-environment-setup-windows/ionic-development-environment-setup-windows-00021.png" alt></p><p>手机上的运行截图<br><img src="http://jackytse-me.gz.bcebos.com/ionic-development-environment-setup-windows/ionic-development-environment-setup-windows-00022.png" alt></p><p>测试结果表明环境安装成功！</p><h2 id="可能存在的问题"><a href="#可能存在的问题" class="headerlink" title="可能存在的问题"></a>可能存在的问题</h2><p>找不到 Android 设备<br>笔者用的是一台三星S4的测试机，在测试中遇到过找不到 Android 设备的问题，然后打开电脑上的豌豆荚，重新连接手机至电脑并授权电脑进行 USB 调试，最终问题得到解决</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>本文写给 Ionic 入门开发者，有开发经验者可以略过<br>如在安装过程中遇到问题，请在文章下方留言，我在收到留言后会及时答复您</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Ionic-概述&quot;&gt;&lt;a href=&quot;#Ionic-概述&quot; class=&quot;headerlink&quot; title=&quot;Ionic 概述&quot;&gt;&lt;/a&gt;Ionic 概述&lt;/h2&gt;&lt;p&gt;Ionic 官网：&lt;a href=&quot;http://www.ionicframework.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.ionicframework.com/&lt;/a&gt;&lt;br&gt;Ionic 是一个强大的 HTML5 SDK，它使用 HTML、CSS、Javascript 等 web 技术帮助你快速构建原生风格的移动应用&lt;br&gt;Ionic 目前能支持 iOS 和 Android &lt;/p&gt;
&lt;h2 id=&quot;与-Cordova-的关系&quot;&gt;&lt;a href=&quot;#与-Cordova-的关系&quot; class=&quot;headerlink&quot; title=&quot;与 Cordova 的关系&quot;&gt;&lt;/a&gt;与 Cordova 的关系&lt;/h2&gt;&lt;p&gt;Ionic 是基于 Cordova 的，在 Cordova 上能用的一切同样可以在 Ionic 上使用&lt;br&gt;Ionic 在 Cordova 基础上增加了 Ionic UI、AngularJS、一个强大的 CLI 工具和一些云端服务等&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Sublime Text 基本配置</title>
    <link href="http://www.jackytse.me/2016/sublime-text-setup/"/>
    <id>http://www.jackytse.me/2016/sublime-text-setup/</id>
    <published>2016-05-18T07:38:25.000Z</published>
    <updated>2018-12-05T08:14:22.496Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Sublime-Text-概述"><a href="#Sublime-Text-概述" class="headerlink" title="Sublime Text 概述"></a>Sublime Text 概述</h2><p>Sublime Text 是一款非常优秀的编辑工具，而且可以跨平台使用<br>现在 Sublime Text 是我主要使用的编辑工具<br>下面介绍一些基本配置： </p><h2 id="安装-Sublime-Text-3"><a href="#安装-Sublime-Text-3" class="headerlink" title="安装 Sublime Text 3"></a>安装 Sublime Text 3</h2><p>官网：<a href="http://www.sublimetext.com" target="_blank" rel="noopener">http://www.sublimetext.com</a><br>前往下载最新版本的 Sublime Text 安装</p><a id="more"></a><h3 id="设置系统环境变量"><a href="#设置系统环境变量" class="headerlink" title="设置系统环境变量"></a>设置系统环境变量</h3><p>安装好之后要设置系统环境变量，以便我们能从终端里直接打开 Sublime Text</p><h4 id="MAC-OS-X-下设置环境变量"><a href="#MAC-OS-X-下设置环境变量" class="headerlink" title="MAC OS X 下设置环境变量"></a>MAC OS X 下设置环境变量</h4><p>打开终端，使用 vim 打开 ~/.bash_profile 文件<br>在末尾添加 alias subl=’open -a /Applications/Sublime\ Text.app’，然后保存<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim ~/.bash_profile</span><br></pre></td></tr></table></figure></p><h4 id="Windows-下设置环境变量"><a href="#Windows-下设置环境变量" class="headerlink" title="Windows 下设置环境变量"></a>Windows 下设置环境变量</h4><p>打开系统属性，在“高级”选项卡中找到环境变量，单击打开“环境变量”设置窗口<br>在“系统变量”列表中找到“Path”变量，双击打开“编辑系统变量”窗口<br>将 Sublime Text 的安装路径添加至“变量值”末尾并保存<br><img src="http://jackytse-me.gz.bcebos.com/sublime-text-setup/sublime-text-setup-00001.png" alt></p><p>打开终端，使用如下命令打开 Sublime Text 并在 Sublime Text 中打开当前目录<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ subl .</span><br></pre></td></tr></table></figure></p><h2 id="安装常用插件"><a href="#安装常用插件" class="headerlink" title="安装常用插件"></a>安装常用插件</h2><p>Sublime Text 提供了非常强大的插件功能来扩展我们的编辑器</p><h5 id="安装-Package-Control"><a href="#安装-Package-Control" class="headerlink" title="安装 Package Control"></a>安装 Package Control</h5><p>同时按下 Ctrl+· 打开 Sublime Console<br>在 Console 中输入以下代码并按回车键，然后等待安装完成<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import urllib.request,os,hashlib; h = &apos;2915d1851351e5ee549c20394736b442&apos; + &apos;8bc59f460fa1548d1514676163dafc88&apos;; pf = &apos;Package Control.sublime-package&apos;; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( &apos;http://packagecontrol.io/&apos; + pf.replace(&apos; &apos;, &apos;%20&apos;)).read(); dh = hashlib.sha256(by).hexdigest(); print(&apos;Error validating download (got %s instead of %s), please try manual install&apos; % (dh, h)) if dh != h else open(os.path.join( ipp, pf), &apos;wb&apos; ).write(by)</span><br></pre></td></tr></table></figure></p><blockquote><p>参考：<a href="https://packagecontrol.io/installation" target="_blank" rel="noopener">https://packagecontrol.io/installation</a></p></blockquote><h5 id="使用-Package-Control-安装插件"><a href="#使用-Package-Control-安装插件" class="headerlink" title="使用 Package Control 安装插件"></a>使用 Package Control 安装插件</h5><p>同时按下 Command+Shift+P(OSX) 或者 Ctrl+Shift+P(Windows) 呼出Package Control 命令窗口<br>输入“pci”并按下 Enter 键<br><img src="http://jackytse-me.gz.bcebos.com/sublime-text-setup/sublime-text-setup-00002.png" alt></p><p>在弹出的插件搜索窗口中输入插件名字，然后会自动在下面的列表中显示找到的相关插件<br>选择要安装的插件，按下 Enter 键，然后你要做的就是等待安装完成</p><h5 id="推荐安装插件"><a href="#推荐安装插件" class="headerlink" title="推荐安装插件"></a>推荐安装插件</h5><table><thead><tr><th>插件名</th><th>说明</th></tr></thead><tbody><tr><td>Emmet</td><td>它使用仿CSS选择器的语法来生成代码，大大提高了 HTML/CSS 代码编写的速度</td></tr><tr><td>jsFormat</td><td>它能快速格式化 js 代码</td></tr><tr><td>TypeScript</td><td>微软官方的 TypeScript 代码插件,提供了代码提示、编译等功能</td></tr></tbody></table><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>Sublime Text 是一款功能非常强大的编辑器，相信使用过之后你一定会和我一样爱上它的</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Sublime-Text-概述&quot;&gt;&lt;a href=&quot;#Sublime-Text-概述&quot; class=&quot;headerlink&quot; title=&quot;Sublime Text 概述&quot;&gt;&lt;/a&gt;Sublime Text 概述&lt;/h2&gt;&lt;p&gt;Sublime Text 是一款非常优秀的编辑工具，而且可以跨平台使用&lt;br&gt;现在 Sublime Text 是我主要使用的编辑工具&lt;br&gt;下面介绍一些基本配置： &lt;/p&gt;
&lt;h2 id=&quot;安装-Sublime-Text-3&quot;&gt;&lt;a href=&quot;#安装-Sublime-Text-3&quot; class=&quot;headerlink&quot; title=&quot;安装 Sublime Text 3&quot;&gt;&lt;/a&gt;安装 Sublime Text 3&lt;/h2&gt;&lt;p&gt;官网：&lt;a href=&quot;http://www.sublimetext.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.sublimetext.com&lt;/a&gt;&lt;br&gt;前往下载最新版本的 Sublime Text 安装&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
